from sqlmodel import Session, select
from models.car_model import Car, CarCreate, CarUpdate

def create_car(session: Session, car_in: CarCreate) -> Car:
    """
    Creates a new Car record in the database.
    """
    # Create a new Car model instance from the input data
    db_car = Car.model_validate(car_in)
    
    # Add the new object to the session and commit
    session.add(db_car)
    session.commit()
    session.refresh(db_car) # Refresh to get the ID generated by the database
    return db_car

def get_all_cars(session: Session, skip: int, limit: int) -> list[Car]:
    """
    Retrieves all car records from the database with pagination.
    """
    statement = select(Car).offset(skip).limit(limit)
    cars = session.exec(statement).all()
    return cars


def get_car_by_id(session: Session, car_id: int) -> Car | None:
    """
    Retrieves a single car by its primary key (ID).
    Returns the Car object or None if not found.
    """
    db_car = session.get(Car, car_id)
    return db_car

def update_car(session: Session, db_car: Car, car_in: CarUpdate) -> Car:
    """
    Updates an existing car record in the database.
    """
    # Get the input data as a dictionary, excluding unset values
    update_data = car_in.model_dump(exclude_unset=True)
    
    # Update the attributes of the existing car object
    for key, value in update_data.items():
        setattr(db_car, key, value)
        
    # Add to session, commit, and refresh
    session.add(db_car)
    session.commit()
    session.refresh(db_car)
    return db_car

def delete_car(session: Session, car_id: int):
    """
    Deletes a car record from the database by its ID.
    """
    # Get the car object to be deleted
    db_car = session.get(Car, car_id)
    if db_car:
        session.delete(db_car)
        session.commit()
    # No return value is needed, the controller will handle the response
