"""Add role_id column to users table and create rbac tables

Revision ID: 97e8c05f4a38
Revises: 
Create Date: 2025-10-26 09:51:48.094153

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '97e8c05f4a38'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('documents')
    op.add_column('cars', sa.Column('fuel_consumption', sa.String(), nullable=True))
    op.alter_column('cars', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('cars', 'year',
               existing_type=sa.TEXT(),
               type_=sa.Integer(),
               existing_nullable=True,
               postgresql_using='year::integer')
    op.alter_column('cars', 'price',
               existing_type=sa.TEXT(),
               type_=sa.Float(),
               existing_nullable=True,
               postgresql_using='price::float')
    op.alter_column('cars', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('cars', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('cars', 'acceleration',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('cars', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('cars', 'image',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('cars', 'images',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True,
               postgresql_using='array_to_json(images)')
    op.alter_column('cars', 'specifications',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               postgresql_using='specifications::json')
    op.create_index(op.f('ix_cars_id'), 'cars', ['id'], unique=False)
    op.create_index(op.f('ix_cars_name'), 'cars', ['name'], unique=False)
    op.drop_column('cars', 'fuelconsumption')
    op.add_column('users', sa.Column('role_id', sa.Integer(), nullable=True))
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('users_email_unique'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_foreign_key(None, 'users', 'role', ['role_id'], ['id'])
    op.drop_column('users', 'role')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('role', sa.VARCHAR(), server_default=sa.text("'sales'::character varying"), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_unique'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('users', 'role_id')
    op.add_column('cars', sa.Column('fuelconsumption', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_cars_name'), table_name='cars')
    op.drop_index(op.f('ix_cars_id'), table_name='cars')
    op.alter_column('cars', 'specifications',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('cars', 'images',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('cars', 'image',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'acceleration',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'price',
               existing_type=sa.Float(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'year',
               existing_type=sa.Integer(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('cars', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('cars', 'fuel_consumption')
    op.create_table('documents',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('documents_pkey'))
    )
    # ### end Alembic commands ###
